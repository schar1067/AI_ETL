that you asked me, but I'm going to try to clarify what we currently have. So what we currently have in clearance that are basically, there is a negotiation between clearance and common sales, and the receivables are just transferred on a monthly basis, but it's of course charged transaction by transaction, right, so based on the amount of transactions that each merchant executes per month, then we have the monthly return. To our account, right? As far as I understand, Stripe doesn't work like that, and there is some kind of information that we need to provide to Stripe in order to say, okay, what is the portion that we want to have on our side, right? Is that correct? That's correct, yeah. So instead of, and that's why I was like, I like to talk about this upfront, because it sounds like it would be a little bit of a change. We typically recommend that platforms just take a cut out of each transaction, and so the net is what ends up in the wholesaler's bank account, and that way it reduces the need to float funds, which is why we find that to be advantageous, and it makes sure, because in this model, you guys are being able to set what that price is, and you'll be responsible for all the fees at the end of, on kind of the ongoing basis, and so really it allows you to kind of cover those fees over time and not have to float funds for an entire month. Got it, okay. And so just to chime in there, the idea, Dan, is that you would probably charge like a 3% and 30 cent fee per transaction or something like that, and that would be on the basis of understanding that, and I've looked at the clearance data as well, but let's say like total network costs are 2%, total stripe costs are 0.2%, and so you guys charge 3% and 30 cents per transaction, and you would net 80 basis points or 0.8% on each transaction. You can set the price to be above 3%. You can do it however you see fit, but I believe, and in talking with AJ and team as well, the intent is to essentially have a blended rate, so it's like, again, that 3% and 30 cents or whatever it may be across the board, and then you guys are thus making a profit on that. Yeah, and Sean, that's totally correct. Okay, sounds good. Great, it sounds like we can certainly cover this in terms of the API call. It sounds like you're already familiar, but it might be good just to quickly review that, so that's helpful. In terms of the merchant experience, I know today the onboarding process is pretty clunky and not great, and that's one of the things you guys are very much looking forward to. I know we had two approaches. One was where you could rely on Stripe to host the form and go through the process. You do also have the option to make it fully custom and then just send us the necessary information through the APIs. Just curious if you guys were thinking one way or the other, if there was a preference to start and then maybe change over time. That's a pretty good question because we need to take into account that this Stripe common sales relationship is not just for common sales, but it's gonna be for the product of our holdings group, which includes other companies, other platforms that we have in the group as well. One of them is a desktop application. It's an on-premise application, it's not a cloud application. Definitely for common sales, we are looking forward for our onboarding process using the Stripe-hosted solution, but for the on-premise solution, which is a cloud-computed system, I'm pretty sure that they're gonna need to have a different solution, and the API would be one of the options so that we don't need to create a desktop application, so I don't see the user using a desktop and then going to the browser and then going back to the desktop, something like that. It would be better to have a new screen on that desktop system and call the API behind the scenes. Yeah, you can certainly do that. I think generally what we recommend in those cases when there's multiple paths, considering there's multiple business units here, you can pre-fill any information, so whether it's hosted or the API form, you could say, if I have information, I'm going to pre-populate that in the account API call, and then you could have something to say, okay, for this business unit, I'm gonna do Stripe-hosted, and therefore use the account link, and then in other cases, I'm gonna go through this, I'm gonna collect information and do it on my own hosted form, so you could go both paths, but start from the, I'm gonna use all the information I already have around my accounts, which might approach easier across all the business units. Yep, okay. Simon, you have a question? Yeah, yeah, Valeria. Sorry. No, it was, it has to do with what you just mentioned, but in a nutshell, could you explain what's the difference between the AP-driven approach and the Stripe-hosted? Is the AP-driven doesn't have any web element component or UI component versus the Stripe-hosted that has these more generic pieces of code that let you customize certain parameters, but are in essence a Stripe element, so to say. I just want to know the big difference between the two. The big difference is with a Stripe-hosted form, we're essentially saying you populate a couple of things, like the business is based in the US, it's a custom Connect account, and in this case, you're gonna be requesting certain capabilities for that account, right? So I want them to be able to accept ACH or card payments and be able to be paid out. And so in those cases, if you're using the hosted form, we'll say, all right, great. We're gonna collect all that information. You can surface this UI form and you don't have to worry about it. We'll let you know, one, did they complete the form? And if they did complete the form, notify you every time they've submitted their application. It'll take a couple of minutes to go through the verification process. And then you'll say, okay, it looks like they're all good from a KYC verification standpoint. With the API-driven, you control, there is no Stripe-hosted form. There's no UI element whatsoever. That's something that you can control. And what we'll actually tell you is, I'll go ahead and jump to that real quick because I think it's helpful to see. So when you create an account, you'll see at each stage, even if this is the hosted onboarding form, we'll tell you in real time what requirements are due in order to make that account in good standing for pay-ins and pay-outs. And so if you wanted to do your own custom form, you could say, all right, here are all the requirements that are currently due. So I need to go and on my custom hosted form, this is the information that I need to collect. Versus, I don't have to worry about that. Stripe knows what's essentially due. So they're gonna ask for all that information on the hosted form itself. Yeah, but the parameters are pretty fine, right? The parameters are the ones that Stripe require for the operation of the API. That's correct, yeah. Okay. Have you have any case where maybe a company has implemented this, the API behavior instead of the Stripe hosted, because they had the need to integrate like different third parties into the same UI environment? Yeah, I think the two primary reasons I've seen people go the custom form route is one, they already have a pretty decent set of the information on those accounts. So they really just wanna minimize the extra that's required. And two, they work with, exactly to your point, they might work or need that information, not just for Stripe, but maybe for other things. And so they'd rather collect it all at once in their own kind of format, because it's particular for that merchant. And then kind of send everything related to each provider as necessary. And so it's more of like the Stripe hosted one is for Stripe, right? And you can, there's some information that you might be able to pull, but not all of it. And if you need that same information for somewhere else, that's another reason why people just build their own custom form as well. Perfect, thank you. Any other questions on the onboarding? One of the folks have a question regarding the onboarding process, but it's pretty technical. I'm not sure that this is the point that we should throw that question right now, or it's perhaps later on in the meeting. Are you gonna go deeper in the onboarding process in one of the slides? I can, yeah, we can come back to it, okay. Okay, yeah, so yeah, no problem. Okay, and then the other thing is just confirming if there are any kind of expectations around settlement timing. So when I say settlement timing, today with Clarent, at what point do the funds kind of hit the wholesaler's external bank account? Is that happening in like a T plus two, T plus four? I'm just trying to understand the expectations on that front. I think that's not a question for this meeting. I think that's something that I'm going to discuss with AJ and also with perhaps Chris Beals. Okay. I'm sorry for answering that way. No, no, that's fine. All right, and then I guess in terms of payouts, and we can cover this later, we have a couple of different options here. The main one being you can set the wholesalers to be on a automatic or manual payout schedule. Automatic meaning Stripe will automatically generate the payout on a predefined basis. So you can say daily, weekly, monthly, whatever. And that will also allow you to use our payout reconciliation reports. The other option is a manual payout where you define the actual amount that is going to be paid out to their external bank account. And you can generate that call whenever you'd like. However, then you're kind of responsible for the reconciliation tracking, which transactions are tied to that particular payout since you're determining the amount. I wasn't sure if there was a preference today. If you guys have thought about, it was pretty clear you're heading one direction or the other. Yeah, I think that's, again, I think that's a question for AJ and Chris Biel, but I'm pretty sure that it's gonna be automatic. That's the current behavior. Because I know the customers as well, the way how they operate the business, that should be automatic. Okay, okay. And then from a, just, I think we'll go through the rest of these because we're gonna get into more detail. So you guys will be able to own everything related to reporting and dashboarding. And we'll talk about, that's where you can use Stripe data, Stripe APIs, reporting to pull information related to customers, transactions, payout management, all of that. And then, oh, somebody's on the line. And then you're also gonna be responsible for the, just merchant, we'll call it merchant risk or loss liability and support. So when the customer has a question, they'll reach out to you. You're responsible for sort of the monitoring of the account, make sure they're in good standing. I mean, I know you guys have close relationship with these wholesalers, so it's, you might already have a lot of these processes in place, but something that I can call out. Okay, and then payment methods, I believe are cards in ACH. And I do wanna spend some time on the payment experience itself so we can get through whether, what is the kind of MVP or first iteration that you guys are thinking about? I know previously we had talked about financial connections and some other ideas to make that verification for ACH easier, but wanted to kind of get into what you guys have expectation-wise in terms of kind of the first iteration. All right. All right, so let's actually, I'm gonna go through each one of the integration components because it sounds, we probably can skip risk management. We'll get into the other pieces. So let's start with the onboarding. Talked about this. We have our hosted onboarding form in the Stripe platform dashboard. So in Comet Sales, in your Stripe account, you'll be able to customize the logo, the color scheme, what have you. And that way, everything that's required in terms of onboarding these merchants can be done via Stripe. The process really is you create an account. So that first calls account creation. In there, you can pre-fill any information that you want. So kind of mentioned, you already have stuff around the account. You can pre-populate it all in that same call. You wanna save the account ID that's returned from that call because that's gonna be what's called, you might've heard like mid or merchant ID. That's what's gonna refer uniquely to that wholesaler. And then you'll create an account link, which is saying here's the hosted form for this particular merchant for them to fill in the necessary information for onboarding. The reason we obviously want to specify the account is we need to associate that information to them. But let's say for whatever reason, they go through the process, they get distracted or they don't have some information and they need to go talk to someone else and they close out. If you want to resurface that link to them, it'll pick up exactly where it left off. And so you could use that same account link call to collect information at a later time. So as long as you're specifying that account ID, we know exactly which wholesaler that refers to. All right, so if I understand correctly, that account link has a different account ID for each customer of us, right? So in other words, the account ID would be on our side, like a unique identifier for that merchant company? Yeah. All right. And then I think we probably should have talked about this, but when you create your platform account, you'll have a set of, you'll have like one set of API keys, right? So there's a little test mode and live mode. And you'll use those same API keys for these calls, right? So it's, you know, that's what will uniquely identify CometSales or another business unit. But then yeah, here in this aspect, this is like the connect account ID referring to the wholesaler. So that's like their particular merchant ID. Okay, great. Well, I think this is the point where I can throw that question from one of the folks. So the question is about what if that connection between CometSales and Stripe doesn't work when the transaction already goes there, the authority process? So let's say that we open the hosted page and you guys receive all the information, and then that goes through on your side, but we don't have the response because of any reason, because of the network connection error, because of any kind of weird connection there. How can we know that that onboarding process already went through without avoiding any duplicate or frustration to the users? Yeah, you'll definitely want to use Webhook, have a Webhook monitor and look for the account.updated events, because that will tell you, okay, they've submitted everything. Now Stripe is going through kind of, there's gonna be a couple minutes, right, where we're going through that verification process. And you'll see each time someone goes through the account, like every screen where they hit save or next, we're saving information to that account. And so you should be able to track kind of the flow in terms of where they are. So regardless of when that, you know, the return or refresh URL gets called, the Webhook monitor, like Webhook event will be fired when you see changes in that account. And that I would rely on to know whether or not the account has finished onboarding. Okay, so now we have the same question from the same guy. So what if the Webhook is not available? Do you have any kind of retry events or something like that? And how frequent or how much time you're gonna be there? Yeah, I will say, so we, when we send a Webhook event, we expect like to get a response, like acknowledgement of like, hey, I've received it. And if we don't receive that response, I don't know the exact cadence, but we have like essentially we'll resend it every couple of minutes until we get like some type of, yep, got it, 200, we're good. And now we've performed our logic. There is like a back off. So it's not like we're gonna send you every, if you didn't get a Webhook, you're gonna get that same Webhook event for X period of time. I do believe we, I don't know the exact timeframe I can look it up. But yeah, the expectation is that you guys kind of acknowledge, yes, we got the Webhook event. We're good here. Okay, great. William, ¿Puedes responder las preguntas? Si, correct. Gracias. De nada. All right. Thank you, Valerie. Skip the custom one. We talked about the fields that are required in onboarding. I can certainly surface this in case you guys are interested to see what information you already have. So if you do wanna pre-populate information, you can. I mentioned this. There's kind of really three things that determine what information is required. And we have this in our docs. And in your case, definitely want to use, there's three capabilities that I suggest that you request. Transfers, which is I want the Connect account to be able to accept transfers from the platform to the Connect account. Card payments, because I think in this case, the wholesaler will be the merchant of record. And so you want them to be able to have that relationship where they're known to the card networks. And then also the ability to take ACH payments. So those are like kind of the three capabilities that I would suggest starting with. Okay, transfer card payments and ACH payments. Yeah, it might be called like US bank account payments, I think in our docs, but it's the, for ACH. And we'll include that in the finance as well. You don't have to. Yeah. Good call, Amy. Through this. Oh yeah, I also, so I forgot that I had these slides and I forgot there was a build. But yeah, you could, you look for the webhook event and see the account that updated. And so you'll know that the webhooks are really the best way to monitor the changes to those accounts. Okay. So you say that normally that webhook is called within a couple of minutes. So I assume that our onboarding process is we're going to provide that information to the user. Okay. Perhaps that information is already in the hosted page on your site that, okay, you are filling these fields and you're gonna get a response within, I don't know. Is that clear for the user or how much time the user should wait for the response? Not clear. I would say in most cases, like once they filled out the form and there's that verification, it takes less than a minute. So you might wanna say like on, when they get redirected back to the application, hey, we're processing, this might take a couple of minutes. And then say like, once you get kind of that webhook event to say like, we're good or something didn't check out, you can kind of then have logic in your system to say, because your account is created, right? So you could do some things on the account. Maybe they've done everything to accept payments, but like their bank account for payouts did not check out, right? So you could say, you can start collecting payments, but we actually need to, your bank account's not working. Let's go through the process again. So depending on what it is, you can kind of have logic to determine what to surface. All right. I think that's the last one. Anything else on account onboarding? I will obviously include all the details in the solution plan, but anything else that comes to mind that you guys wanna call out? Not really, I think that's pretty clear. Okay. I'm gonna skip this section for now. Let's get into payment acceptance. Let's get into payment acceptance. So I think, Dan, when we last spoke, I remember having three kind of key use cases here. One was you send a customer a link to collect a new payment method. The second, you guys have like, there's one portion where there is an e-commerce page for the wholesalers, and so they'll enter in the payment method during the e-commerce purchase. They also might have like a saved payment method on file. I couldn't remember if that was the case. And then the last one being just like a merchant initiated transaction. So someone, maybe they pick up the phone or something and they say, yeah, charge my saved payment method file. And so you might initiate the payment because you already have it on your side. Yeah. Are there other kind of use cases, details to call out? Something that I may have missed? Yeah, I'm going to try to use the same words, but I'm... No, you don't have to use the same words. I'll do the translation. Yeah, please. So there is a scenario where the customer of our customer, so like the final e-commerce user would be able to save the payment method without making a purchase. So just like a way to manage their own cards in parallel with the payment method. So they have their own cards on file to use those cards in a future perhaps. They want to delete a card because they're already spiraled because I don't know, they have an error in that card. So we have on a screen to manage cards on their own, like a self-service screen. Okay, yeah. I don't know if that's covered. Yeah, I would say that's worth calling out. It's kind of like a, it's like an end customer portal, right, for them to say like, this is my account. These are my saved payment methods. I want to change. I think that's a, it'll use the same set of, you know, same tooling, but I'll call that out as like a unique use case. Okay. The other one that I have in mind is about terminals. So there are wholesale operations, they have cashiers as well. So they receive the cards, the physical cards of the terminals. So I'm not sure if that's one of the use cases that you have there, but perhaps a new one as well. Okay, yeah, I did not include that. So it's actually good. So are you planning to have the terminals for like kind of the first iteration, or is it like a, like- Yeah, yeah, because one of the, I mean, I don't know how we're going to call this first iteration, or how we're going to call the MVP, but because we have like an MVP of the MVP. So basically one of the main goals is to replace clearance with the stripe, right? So in clearance, we need to, I mean, we need to achieve the parity between clearance and stripe. One of the use cases that we have is terminals. So if we don't cover terminals on stripe, then we're not going to make it. Okay, I will certainly include that, which also now brings up a whole set of questions that I did not include. But I guess the first thing being, if you guys like already kind of selected the reader, you're thinking about, and what point of sale system, like in terms of the point of sale system, what kind of system is it? Is it desktop-based? It's the same common sales web application. But again, I mean, this is also being new for me. I mean, I'm a CPO in common sales, but I also need to take into account you have two companies in the group as well. So Plural Computer System is a desktop application and they have terminals as well. So I'm not not just, I mean, they confirmed yesterday that 95% of the transactions go to the terminals, which is not the same case with us. I mean, on our side, it could be sort of like the other way around. 95% of the transactions go to the hosted page and only 5% to terminals. And Plural Computer System is backwards. So we're going to have both. I mean, we're going to have the web application, common sales, calling the terminal and receiving that transaction. And Plural Computer System is using a desktop system. Okay. We have like, the first thing that comes to mind is if you're looking for like one integration that would work across all those use cases, we have what's called like a server-driven integration where in that case, like your backend talks to Stripe and Stripe will talk directly to the readers. And so it makes it a little bit easier in terms of like, I don't have to, you know, integrate an SDK in kind of the web portion or like worry about, you know, like I have web for the, or a JavaScript SDK for the web one. And then I have like server-driven for a desktop application. You could have just server-driven and that will work with our smart readers, which have the countertop, you know, kind of feature. That sounds pretty interesting. Let me ask you something about that. So that's a driven solution would be only for the terminals or would be for the hosted pages as well? Or the screen? Yeah. So, I mean, those are all like in some cases, those are also all server-driven, but the difference here is that you're gonna be using the payment element to collect the card details and we're for card presence, the reader that's collecting it. But the intention is that it's the same set of APIs that are being used. So it's going to be the same payment intent API. It'll just, there'll be a couple of different calls to kind of, for the reader, you know, you have to communicate to the reader of like, I'm ready to accept a payment. There's a couple of different nuances, but the same API that says like, this is the amount, this is where it's going, all the kind of basics, that's the same API. Yeah, because that's one of the dilemmas that we currently have in this phase of the project. I mean, taking into account that we have the other two companies in this group, two out of the three companies are cloud-based solutions. And the third solution is a desktop application. It's very likely to have another bunch of companies in the group, in the features, and not just three, but four, five, six, which are going to be most likely to be cloud solutions. So it would be ideal to have any kind of recommendation on your side. How can we create like a pretty standard solution for the group, not just for common sales? So if perhaps you recommend, in your case, you need to create, I mean, each system will have to create their own solution instead of creating something generic for the group. That's kind of the dilemma that we currently have. Yeah, I think, I mean, I'm already leaning towards like a server-driven approach, because then it'll also make it easier to do. I mean, that's the whole point, is that it makes it easier to manage like card-present and card-not-present. So I'll start to include that information in the solution plan and see if that makes the most sense. Okay, okay. Okay, anything else, other? Oh, yeah, the other use cases that we have is about refunds, pre-authorizations, and, yeah, full refunds and partial refunds. So is that also a use case for your slide, or is something already included there? Yeah, I sort of naturally include refunds in my brain. If someone makes a payment, someone's gonna ask for their money back at some point. But yeah, our refund API supports like full refund and partial refund as well. So I do have a couple of slides that just show the fund flow for that, for considering like the platform and the merchant. So I do have a couple of slides on that, but pre-authorizations. Yeah, we call that with, that's what our setup intent API is. I don't know what order I have this in. I think I've showed this slide before, but really we have payment intent, which is I, as a customer, know that I'm paying for a specific product or service. I know the amount I'm going to pay. So I'm gonna collect a payment method for that transaction. And then we have what's called a setup intent, which does that pre-authorization to collect the payment method, but it doesn't have like, it's not associated to a specific like transaction. It's just saying, is this a valid card or is this a valid bank account? Let me do some checks. Okay, we're good. And I'll just save that particular payment method to a customer for future use. So that should cover that use case. And the reason why I just, I asked some of these questions is typically I'll put together some type of flow to help illustrate, this is what the front end does, this is what the back end does, and this is what Stripe does, as well as like the different customer interactions. So like on the top here, this is like the sending the customer a link to collect a payment method, right? So I think in this case, we previously talked about Comet would have a hosted page and you guys would use the payment element that you would embed in that page, but behind the scenes that's using our setup intent, right? So that's what this flow on the top would illustrate. And then like another one on the, I think on the bottom is around more ACH payments. So one thing I wanted to ask was, as part of NACHA's kind of bank validation verification, I know it's B2B payments. So that's why I wasn't sure if there was a preference in terms of just allowing to do like, this is a valid bank account. I know I can debit it. That's what we call automatic bank validation. Or if you guys want to do a verification step where someone then has to log into their bank and kind of say like, yes, this is my bank account, which is a little bit, sometimes more difficult for like a B2B scenario because the person that owns the bank account might not have the login. So that's kind of why I call it the difference. The added benefit though, of going through that route is obviously besides the reduction and just like you're doing that verification stuff so you know they own the bank account. We talked about the ability to then do like a balance check before doing a debit when it goes through that process that you guys might want to use, for maybe large orders or maybe certain circumstances, you might want to do a balance check before you actually try to debit the account, which would only be available if you go through kind of that verification process. Okay, I didn't know the question for AJ. Okay. All right, we can ask them. Hmm. I'm gonna put that in my notes as well. I will say it's mostly a configuration thing. So it's not gonna affect the general flow. There might be a couple of like, it might change like kind of the error situations, right? So if it's verification, you're using just like, you have the option to use the financial connections product versus automatic bank validation is a little different, but the overall flow is the same. In terms of recommending configurations, that's sort of why I asked that question. Okay. Okay, 15 minutes. I did want to confirm, so I had kind of integration recommendations here. Were you guys looking at the payment element in terms of collecting card and bank account information, or we usually have like, there's also Stripe Checkout, which is a fully hosted Stripe page. Didn't know if you guys had. If we were thinking only on the common self solution, then our choice would be for the Stripe hosted solution. Like I'm not using a payment element, but everything on your side and just open that widget. But again, I mean, taking into account that we need to cover the other two companies as well. One option would be that, okay, common self use a Stripe hosted embedded widget, FCS, a pro computer system will use the server side solution, the server driven solution. I don't know, that's where we are right now. In terms of the Stripe Checkout, so one thing I did want to call out, I think this is why I assumed payment element. So Stripe Checkout uses, it's a fully hosted page and it uses the branding, I believe of the, of Comet sales or the platform account. So it won't be like branding specific to the wholesaler. And I don't, I didn't know if that was going to be confusing or not. That shouldn't be a problem because of the same thing that we have with Cleaning as well. When we opened the Checkout widget, that is our Clean and Brand there. Cleaning and common sales as well, we have both, so. Perfect. All right, so I will change all of this to Stripe Checkout. What I can do though, Dan, is I'll send you, I'll put like kind of a, like other, you know, integration types so that if there is, you know, as you guys think about it, you could also start with Stripe Checkout and then maybe decide later the payment element. So we can look at that, but I at least do want to call out the, there's definitely also a lot of great customizations with Stripe Checkout that come out of the box. So you might need to talk through some of those, but those are all just configurations we can figure out over time. Okay. So is the payment element a term that you use on your site for an API solution or is that also in the front end but a different, what is that? It's the front end component. So it's sort of like, the easy thing is like, it's an iframe where you're still offloading PCI compliance to Stripe, but it's, you know, when you make the call, you'll essentially say like, all right, send the payment details directly to Stripe. So it's just more of like full redirect hosted page versus like just a embeddable kind of payment collection form within your own kind of hosted checkouts, best way to think of the difference, but they're both front end. Well, I think you have a slide in here too that might just help visualize the payment element itself. Yeah. Oh, this one. Oh, I should have put the visual. Um, yeah, so the payment element is just kind of, you can pick and choose just like with Stripe checkout, you can pick which payment methods that you want to surface. But the idea is that it's only the payment portion versus Stripe checkout. You can say like, this is exactly the items in the basket. You can configure the quantity. There are a couple of other like bells and whistles that come with it, but yeah, the main difference is like one's hosted and one's like embedded into your own checkout page. Okay. Got it. All right. And both are kind of pre-configured with error messaging. And then obviously like they're all leveraging that same setup intents and payments and intents APIs. So all consistent across the board. And that's also why Val mentioned that if you wanted to start with checkout, but move to this, it's fundamentally like the same API calls that are being made. So it wouldn't mean like a drastic change in your integration. It's just a matter of like the entry is then more owned by you and embedded into your experience with the payment element. Okay. I'm just going to go over this real quickly. It's something I always like to just make sure because I think the fun flow always is like fundamental to how you think about the integration, where objects live, et cetera. So the same API, we refer to it as like a destination charge, but it's really the same payment intent API where when you specify the amount that the customer is going to pay, that customer actually, the funds first hit Comet's platform account. You then have the ability to say, I'm going to take X from that transaction. That's kind of my cut of the transaction. So in the case, the example here is, I'm going to take $5 from $100 charge, the Stripe fees and everything associated for that, including, let's say in this case, like IC+, is $3 and 20 cents. So my commission for me as the platform is $1.80. And then the $95 is what's transferred automatically to the wholesaler's Connect account, which will then be paid out to their bank account. And that's just the overall flow here. And so in the API call, you'll have the ability to define the overall charge amount, the amount that you as the platform will take and which Connect account you want to transfer the funds to, in addition to currency as well. Okay. Yeah, those are some numbers that I wanted to review internally, but yeah, I understand the concept. Yeah, these are examples. You have, this is all configurable. The other thing too, I think it's sort of, I can send the deck after, so it shows you what's enabled. The other thing is you, because you're doing a Stripe checkout, you'll define the same parameters, but it will be like with a checkout session. So I'll kind of update this to refer to how it works with Stripe checkout. And then also with just, I don't include for how refunds work, you can decide whether or not you want to refund the application fee. So just something also to think about. So maybe you say like, if it's a transaction that happened, I'm going to keep the fee because I'm still also like not going to get the fees back that have been charged, or you can refund it back to the wholesaler. And then we also have, in the case of disputes, we can also share the fund flows there. Okay. Okay. I'm going to talk about payouts. I'm gonna skip ahead. So the one thing I did want to ask questions are, like how you guys are thinking about kind of the platform management aspect of things, how you're thinking about pulling Stripe data. One thing besides kind of the Stripe objects, like customers and payment methods and all of that, everything in terms of the actual transactions themselves. So any successful transaction will have what we call a balanced transaction within Stripe. And it's kind of our universal object for anything that affects your Stripe balance. Every single balanced transaction, it could be for a payment, it will have clear fee breakdowns. And so it's really kind of like the foundational aspect of how everything from a financial reporting standpoint will work. One thing to call out if you guys are thinking through the build as well is you can attach custom metadata to any kind of updatable Stripe object. So if, for example, you want to know, if you want to make it really easy to search in the dashboard for an ID in your system, or you want to make it really easy when you pull a report to have kind of just like, this is the Stripe transaction ID, this is the one that I have here in common sales or kind of any of the other business units, you can put any of that metadata on various objects to make it easy to reconcile the different ways that same data is represented in different systems. And so something to just think through when you are doing kind of the, how do I get these systems to talk to each other? That's great, good. And then the other thing is there's a lot of different ways to get data out of Stripe. We've talked about web hooks and just Stripe APIs, right? That's pretty good for just like real time events. So reacting to things in your application or pulling things to display. But when we talk about financial reporting or the things like what you want to surface to the different wholesalers so that they understand what's happening with their account, we have a couple of different tools for that. One is called Stripe Financial Reporting. So you can pull reports via the dashboard or in your case API, and it can add supplemental data that will fit. Like I want to pull all my transactions for the last week and I want to know kind of like, this was the total and then this was kind of the application fee that you paid to me, it's common sales. We'd recommend doing that through something like financial reporting as opposed to like the APIs. And that comes like out of the box with Stripe. We have other, depending on kind of what your needs are from like a platform management, we also have like other data tools. So Sigma is, so Stripe Financial Reporting is like prebuilt, right? Like you can't, you can pick and choose which columns you want, but like, you know, the data schema set. With Sigma, it's more of a like customizable reporting tool where you can build your own queries within Stripe. And there's also some supplemental data, like more detailed data that's available where you can get really sophisticated in terms of what you want to pull and make available for your users. And so really the data format here is truly custom. It fits whatever your needs are. And then we have what's called, and that does require obviously somebody to write queries. We have some pre-baked ones, but that does require some, you know, knowledge. And then we have what's called Stripe Data Pipeline, which will is more of a no-code solution, which automatically pipes all of your Stripe data. So everything that Sigma has into your Amazon Redshift or Snowflake instance. And so you can kind of use the data naturally without having to worry about like syncing between the two or building any queries. It's just automatically available there. And so depending on like kind of how you guys are thinking about building the merchant dashboard and building their financial reports, I like to mention these options. I usually see platforms start somewhere more on the left side, and then they figure out maybe they go more on the right over time. But I think it's always helpful to see like the spectrum of options and what makes sense. Yeah, that's great to know. Cool. I don't have any more slides. I think if I'm going back to the list, I have a set, I think we squared away on some of the integration requirements and there are a couple, I think left for AJ, but shouldn't affect the integration plan too much, more of like the configuration of your account. I guess I'll open it up to the team. Are there certain areas you guys wanted to dig more into? Are there any pieces where, like is the integration, anything else on the integration you guys are still thinking about taken into account as a building solution plan? Thank you. Any questions, guys, that you want to consider in terms of technical issues or integration issues, or? Daniel, I have a question in terms of security issues, but I don't know if that's the case. I have a question about the web. Yeah, yeah, sure, go ahead. Hey, Valerio and Daniel, I have a question in terms of cybersecurity. So, in order to use the web, we have to expose social media to internet. So, the question is, do you have like a piece of IPs that we can use in order to have only permission to move those IPs? I don't know off the top of my head, but I know there's documentation for this. So, what I will do is include that in the solution plan so that you know how you have to set up. I understand like the ability, so you make sure you're only receiving from our endpoints. So, I'll include that in the solution plan. Right. Okay, thanks. Valerio, I have a petition. Could you share this presentation with us? Of course. Thank you. This is much value for us. Yeah, I'll update the presentation based off the information today. And then I'll also follow up, I'll start working on the solution plan. So, it'll have like much more details. So, I think I still covered like broad strokes today. You guys are probably interested in like, what APIs do I need to call? Or if there's an error, how do I react? I'll get into that level of detail on the solution plan. And then what we can do is I'll send that over to you, to the team, or I'll send it to you, Dan. You guys take time to review and I can schedule some time to say like, okay, are there any questions or something you didn't expect or I didn't include to make sure that you guys feel comfortable with kind of the approach and that we've covered everything in terms of making sure you guys have the integration set up correctly. And the plan following the integration or solution.